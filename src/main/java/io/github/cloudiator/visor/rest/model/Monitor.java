/*
 * Visor REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.cloudiator.visor.rest.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.cloudiator.visor.rest.model.DataSink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

/**
 * Monitor
 */


public class Monitor implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PUSHMONITOR("PushMonitor"),
    
    SENSORMONITOR("SensorMonitor");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("metricName")
  private String metricName = null;

  @SerializedName("componentId")
  private String componentId = null;

  @SerializedName("monitorContext")
  private Map<String, String> monitorContext = null;

  @SerializedName("dataSinks")
  private List<DataSink> dataSinks = null;

  @SerializedName("uuid")
  private String uuid = null;

  public Monitor type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Monitor metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

   /**
   * Unique name identifying the metric
   * @return metricName
  **/
  @ApiModelProperty(required = true, value = "Unique name identifying the metric")
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }

  public Monitor componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * ID of the component monitored by this sensor.
   * @return componentId
  **/
  @ApiModelProperty(required = true, value = "ID of the component monitored by this sensor.")
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }

  public Monitor monitorContext(Map<String, String> monitorContext) {
    this.monitorContext = monitorContext;
    return this;
  }

  public Monitor putMonitorContextItem(String key, String monitorContextItem) {
    if (this.monitorContext == null) {
      this.monitorContext = new HashMap<String, String>();
    }
    this.monitorContext.put(key, monitorContextItem);
    return this;
  }

   /**
   * Context of the monitor. Multiple key - value pairs depicting the environment of the monitor.
   * @return monitorContext
  **/
  @ApiModelProperty(value = "Context of the monitor. Multiple key - value pairs depicting the environment of the monitor.")
  public Map<String, String> getMonitorContext() {
    return monitorContext;
  }

  public void setMonitorContext(Map<String, String> monitorContext) {
    this.monitorContext = monitorContext;
  }

  public Monitor dataSinks(List<DataSink> dataSinks) {
    this.dataSinks = dataSinks;
    return this;
  }

  public Monitor addDataSinksItem(DataSink dataSinksItem) {
    if (this.dataSinks == null) {
      this.dataSinks = new ArrayList<DataSink>();
    }
    this.dataSinks.add(dataSinksItem);
    return this;
  }

   /**
   * Get dataSinks
   * @return dataSinks
  **/
  @ApiModelProperty(value = "")
  public List<DataSink> getDataSinks() {
    return dataSinks;
  }

  public void setDataSinks(List<DataSink> dataSinks) {
    this.dataSinks = dataSinks;
  }

  public Monitor uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID set by Visor
   * @return uuid
  **/
  @ApiModelProperty(value = "UUID set by Visor")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Monitor monitor = (Monitor) o;
    return Objects.equals(this.type, monitor.type) &&
        Objects.equals(this.metricName, monitor.metricName) &&
        Objects.equals(this.componentId, monitor.componentId) &&
        Objects.equals(this.monitorContext, monitor.monitorContext) &&
        Objects.equals(this.dataSinks, monitor.dataSinks) &&
        Objects.equals(this.uuid, monitor.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, metricName, componentId, monitorContext, dataSinks, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Monitor {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    monitorContext: ").append(toIndentedString(monitorContext)).append("\n");
    sb.append("    dataSinks: ").append(toIndentedString(dataSinks)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

