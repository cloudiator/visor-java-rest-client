/*
 * Visor REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.cloudiator.visor.rest.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.cloudiator.visor.rest.model.Interval;
import io.github.cloudiator.visor.rest.model.Monitor;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

/**
 * SensorMonitor
 */

public class SensorMonitor extends Monitor implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("sensorClassName")
  private String sensorClassName = null;

  @SerializedName("interval")
  private Interval interval = null;

  @SerializedName("sensorConfiguration")
  private Map<String, String> sensorConfiguration = null;

  public SensorMonitor sensorClassName(String sensorClassName) {
    this.sensorClassName = sensorClassName;
    return this;
  }

   /**
   * Get sensorClassName
   * @return sensorClassName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getSensorClassName() {
    return sensorClassName;
  }

  public void setSensorClassName(String sensorClassName) {
    this.sensorClassName = sensorClassName;
  }

  public SensorMonitor interval(Interval interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @ApiModelProperty(required = true, value = "")
  public Interval getInterval() {
    return interval;
  }

  public void setInterval(Interval interval) {
    this.interval = interval;
  }

  public SensorMonitor sensorConfiguration(Map<String, String> sensorConfiguration) {
    this.sensorConfiguration = sensorConfiguration;
    return this;
  }

  public SensorMonitor putSensorConfigurationItem(String key, String sensorConfigurationItem) {
    if (this.sensorConfiguration == null) {
      this.sensorConfiguration = new HashMap<String, String>();
    }
    this.sensorConfiguration.put(key, sensorConfigurationItem);
    return this;
  }

   /**
   * Get sensorConfiguration
   * @return sensorConfiguration
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getSensorConfiguration() {
    return sensorConfiguration;
  }

  public void setSensorConfiguration(Map<String, String> sensorConfiguration) {
    this.sensorConfiguration = sensorConfiguration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorMonitor sensorMonitor = (SensorMonitor) o;
    return Objects.equals(this.sensorClassName, sensorMonitor.sensorClassName) &&
        Objects.equals(this.interval, sensorMonitor.interval) &&
        Objects.equals(this.sensorConfiguration, sensorMonitor.sensorConfiguration) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sensorClassName, interval, sensorConfiguration, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorMonitor {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sensorClassName: ").append(toIndentedString(sensorClassName)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    sensorConfiguration: ").append(toIndentedString(sensorConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

